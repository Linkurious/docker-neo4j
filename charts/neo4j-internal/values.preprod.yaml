neo4j-standalone:
  neo4j:
    resources:
      cpu: "0.5"
      memory: "2Gi"

    # Uncomment to set the initial password
    # password: "my-initial-password"

    # Uncomment to use enterprise edition
    edition: "enterprise"
    acceptLicenseAgreement: "yes"
  config:
    #dbms.connector.bolt.advertised_address: neo4j-pr-23.neo4j-preprod.k8s.dev.linkurious.net:7687
    #dbms.connector.https.advertised_address: neo4j-pr-23.neo4j-preprod.k8s.dev.linkurious.net:443
    dbms.security.authentication_providers: oidc-azure,native
    dbms.security.authorization_providers: oidc-azure,native
    dbms.security.oidc.azure.display_name: Azure
    dbms.security.oidc.azure.auth_flow: pkce
    dbms.security.oidc.azure.well_known_discovery_uri: https://login.microsoftonline.com/9c0acfe4-4dba-44f4-b8ae-c39d9aa8d991/v2.0/.well-known/openid-configuration
    dbms.security.oidc.azure.audience: 53d9ec2c-b8dd-4e1e-96a2-b9c484205353
    dbms.security.oidc.azure.claims.username: email
    dbms.security.oidc.azure.claims.groups: groups
    dbms.security.oidc.azure.params: "client_id=53d9ec2c-b8dd-4e1e-96a2-b9c484205353;response_type=code;scope=openid profile email"
    dbms.security.oidc.azure.config: "token_type_principal=id_token;token_type_authentication=id_token"
    dbms.security.oidc.azure.authorization.group_to_role_mapping: |
      "86b0df6b-ec62-41f6-9250-d22e951755fa" = admin; \
      "1e27ad10-142d-4921-8408-055b422f32f5" = reader

  podSpec:
    initContainers:
      - name: git-sync
        image: k8s.gcr.io/git-sync/git-sync:v3.5.0
        env:
        - name: GIT_SYNC_REPO
          value: https://github.com/Linkurious/docker-neo4j
        - name: GIT_SYNC_DEST
          value: docker-neo4j
        - name: GIT_SYNC_BRANCH
          value: feature/init-db
        - name: GIT_SYNC_ONE_TIME
          value: 'true'
        volumeMounts:
          - name: data
            mountPath: /tmp/git/
      - name: neo4j-restore
          # command: ['ls', '-lah', '/data/git-sync/', '&&', '/data/git-sync/docker-neo4j/scripts/dataset-download.sh']
        command: ['/data/docker-neo4j/scripts/dataset-download.sh', '-p', '/data']
        env:
          - name: DATASETS
            value: aml-1.0.0
          - name: DATASET_NEO4J_VERSION
            value: 4.2.0
        envFrom:
          - secretRef:
              name: neo4j-preprod-nexus-dataset # imports NEXUS_TOKEN
        volumeMounts:
          - name: data
            mountPath: /data/

  volumes:
    data:
      mode: "volume"
      volume:
        emptyDir: {}
  services:
    neo4j:
      spec:
        type: ClusterIP

##### Top level lke chart
nameOverride: "neo4j"
fullnameOverride: ""
hostPostfix: k8s.dev.linkurious.net
ingressRoute:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - paths:
        - path: /
          pathType: ImplementationSpecific
      # host: neo4j.k8s.dev.linkurious.net
  tls:
    secretName: wildcard-default-cert
    hosts: []
      # - chart-example.local
