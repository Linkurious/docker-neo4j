neo4j:
  neo4j:
    name: neo4jv5-internal
    resources:
      cpu: "500m"
      memory: "2Gi"

    # Uncomment to set the initial password
    # password: "my-initial-password"
    # passwordFromSecret: ""
    passwordFromSecret: "neo4j-admin-auth"
    passwordFromSecretLookup: false

    # Uncomment to use enterprise edition
    edition: "enterprise"
    acceptLicenseAgreement: "yes"
  config:
    # server.bolt.advertised_address: neo4j-enys.neo4j-dev.k8s.dev.linkurious.net:7687
    # server.https.advertised_address: neo4j-enys.neo4j-dev.k8s.dev.linkurious.net:443
    server.config.strict_validation: "false"
    dbms.security.authentication_providers: oidc-azure,native
    dbms.security.authorization_providers: oidc-azure,native
    dbms.security.oidc.azure.display_name: Azure
    dbms.security.oidc.azure.auth_flow: implicit
    dbms.security.oidc.azure.well_known_discovery_uri: https://login.microsoftonline.com/9c0acfe4-4dba-44f4-b8ae-c39d9aa8d991/v2.0/.well-known/openid-configuration
    dbms.security.oidc.azure.audience: 38968079-7d93-4e73-b264-63c90120daaa
    dbms.security.oidc.azure.claims.username: upn
    dbms.security.oidc.azure.claims.groups: groups
    dbms.security.oidc.azure.params: "client_id=38968079-7d93-4e73-b264-63c90120daaa;response_type=token;scope=openid profile email GroupMember.Read.All"
    dbms.security.oidc.azure.config: "principal=upn;token_type_principal=access_token;token_type_authentication=access_token"
    dbms.security.oidc.azure.token_params: "client_secret=Wql8Q~yaYlkng7Qwi74HG675capP6dq.xSdLwaiQ"
    dbms.security.oidc.azure.authorization.group_to_role_mapping: |
      "86b0df6b-ec62-41f6-9250-d22e951755fa" = admin; \
      "admins" = admin; \
      "1e27ad10-142d-4921-8408-055b422f32f5" = reader
    dbms.security.oidc.azure.get_groups_from_user_info: "false"
    dbms.security.logs.oidc.jwt_claims_at_debug_level_enabled: "true"
    metrics.prometheus.enabled: 'true'
    server.metrics.prometheus.enabled: 'true'
    server.metrics.prometheus.endpoint: '0.0.0.0:2004'

    # used to workaround lack of config in helm chart
    DATASETS: crunchbase-2.0.0
    DATASET_NEO4J_VERSION: 5.3.0
  env:
    NEO4JLABS_PLUGINS: '["apoc"]'

  podSpec:
    initContainers:
      - name: git-sync
        image: k8s.gcr.io/git-sync/git-sync:v3.6.2
        env:
        - name: GIT_SYNC_REPO
          value: https://github.com/Linkurious/docker-neo4j
        - name: GIT_SYNC_DEST
          value: docker-neo4j
        - name: GIT_SYNC_BRANCH
          value: develop
        - name: GIT_SYNC_ONE_TIME
          value: 'true'
        volumeMounts:
          - name: data
            mountPath: /tmp/git/
      - name: neo4j-restore
          # command: ['ls', '-lah', '/data/git-sync/', '&&', '/data/git-sync/docker-neo4j/scripts/dataset-download.sh']
        command: ['/data/docker-neo4j/scripts/dataset-download.sh', '-p', '/data']
        envFrom:
          - secretRef:
              name: neo4j-dev-nexus-dataset # imports NEXUS_TOKEN
        volumeMounts:
          - name: data
            mountPath: /data/
          - name: neo4j-conf
            mountPath: "/config/neo4j.conf"

  volumes:
    data:
      mode: "volume"
      volume:
        emptyDir: {}
  services:
    neo4j:
      spec:
        type: ClusterIP

  # Jvm configuration for Neo4j
  jvm:
    # If true any additional arguments are added after the Neo4j default jvm arguments.
    # If false Neo4j default jvm arguments are not used.
    useNeo4jDefaultJvmArguments: true
    # additionalJvmArguments is a list of strings. Each jvm argument should be a separate element:
    additionalJvmArguments:
      - "-XX:+ExitOnOutOfMemoryError"
    # - "-XX:+HeapDumpOnOutOfMemoryError"
    # - "-XX:HeapDumpPath=/logs/neo4j.hprof"
    # - "-XX:MaxMetaspaceSize=180m"
    # - "-XX:ReservedCodeCacheSize=40m"
  
  logging:
    serverLogsXml: |-
      <?xml version="1.0" encoding="UTF-8"?>
      <!-- Example JSON logging configuration -->
      <Configuration status="ERROR" monitorInterval="30" packages="org.neo4j.logging.log4j">
          <Appenders>
              <!-- Default debug.log, please keep -->
              <RollingRandomAccessFile name="DebugLog" fileName="${config:server.directories.logs}/debug.log"
                                        filePattern="$${config:server.directories.logs}/debug.log.%02i">
                  <JsonTemplateLayout eventTemplateUri="classpath:org/neo4j/logging/StructuredLayoutWithMessage.json"/>
                  <Policies>
                      <SizeBasedTriggeringPolicy size="20 MB"/>
                  </Policies>
                  <DefaultRolloverStrategy fileIndex="min" max="7"/>
              </RollingRandomAccessFile>

              <RollingRandomAccessFile name="HttpLog" fileName="${config:server.directories.logs}/http.log"
                                        filePattern="$${config:server.directories.logs}/http.log.%02i">
                  <JsonTemplateLayout eventTemplateUri="classpath:org/neo4j/logging/StructuredLayoutWithMessage.json"/>
                  <Policies>
                      <SizeBasedTriggeringPolicy size="20 MB"/>
                  </Policies>
                  <DefaultRolloverStrategy fileIndex="min" max="5"/>
              </RollingRandomAccessFile>

              <RollingRandomAccessFile name="QueryLog" fileName="${config:server.directories.logs}/query.log"
                                        filePattern="$${config:server.directories.logs}/query.log.%02i">
                  <JsonTemplateLayout eventTemplateUri="classpath:org/neo4j/logging/QueryLogJsonLayout.json"/>
                  <Policies>
                      <SizeBasedTriggeringPolicy size="20 MB"/>
                  </Policies>
                  <DefaultRolloverStrategy fileIndex="min" max="7"/>
              </RollingRandomAccessFile>

              <RollingRandomAccessFile name="SecurityLog" fileName="${config:server.directories.logs}/security.log"
                                        filePattern="$${config:server.directories.logs}/security.log.%02i">
                  <JsonTemplateLayout eventTemplateUri="classpath:org/neo4j/logging/StructuredLayoutWithMessage.json"/>
                  <Policies>
                      <SizeBasedTriggeringPolicy size="20 MB"/>
                  </Policies>
                  <DefaultRolloverStrategy fileIndex="min" max="7"/>
              </RollingRandomAccessFile>
          </Appenders>

          <Loggers>
              <!-- Log levels. One of DEBUG, INFO, WARN, ERROR or OFF -->

              <!-- The debug log is used as the root logger to catch everything -->
              <Root level="INFO">
                  <AppenderRef ref="DebugLog"/> <!-- Keep this -->
              </Root>
              <!-- The query log, must be named "QueryLogger" -->
              <Logger name="QueryLogger" level="INFO" additivity="false">
                  <AppenderRef ref="QueryLog"/>
              </Logger>
              <!-- The http request log, must be named "HttpLogger" -->
              <Logger name="HttpLogger" level="INFO" additivity="false">
                  <AppenderRef ref="HttpLog"/>
              </Logger>
              <!-- The security log, must be named "SecurityLogger" -->
              <Logger name="SecurityLogger" level="DEBUG" additivity="false">
                  <AppenderRef ref="SecurityLog"/>
              </Logger>
          </Loggers>
      </Configuration>

##### Top level lke chart
nameOverride: "neo4j"
fullnameOverride: ""
hostPostfix: k8s.dev.linkurious.net
ingressRoute:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - paths:
        - path: /
          pathType: ImplementationSpecific
      # host: neo4j.k8s.dev.linkurious.net
  tls:
    secretName: wildcard-default-cert
    hosts: []
      # - chart-example.local
